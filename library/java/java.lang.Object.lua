--- Optional.empty
---@meta
-- java.lang.Object
---@class java.lang.Object: java.lang.Object
---@overload fun(): java.lang.Object
local Object = {}

---@public
---@return java.lang.Class The {@code Class} object that represents the runtime         class of this object.
--- Returns the runtime class of this {@code Object}. The returned {@code Class} object is the object that is locked by {@code static synchronized} methods of the represented class.  <p><b>The actual result type is {@code Class<? extends |X|>} where {@code |X|} is the erasure of the static type of the expression on which {@code getClass} is called.</b> For example, no cast is required in this code fragment:</p>  <p> {@code Number n = 0;                             }<br> {@code Class<? extends Number> c = n.getClass(); } </p>
function Object:getClass() end

---@public
---@return number a hash code value for this object.
--- Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. <p> The general contract of {@code hashCode} is: <ul> <li>Whenever it is invoked on the same object more than once during     an execution of a Java application, the {@code hashCode} method     must consistently return the same integer, provided no information     used in {@code equals} comparisons on the object is modified.     This integer need not remain consistent from one execution of an     application to another execution of the same application. <li>If two objects are equal according to the {@link     #equals(Object) equals} method, then calling the {@code     hashCode} method on each of the two objects must produce the     same integer result. <li>It is <em>not</em> required that if two objects are unequal     according to the {@link #equals(Object) equals} method, then     calling the {@code hashCode} method on each of the two objects     must produce distinct integer results.  However, the programmer     should be aware that producing distinct integer results for     unequal objects may improve the performance of hash tables. </ul>
function Object:hashCode() end

---@param obj java.lang.Object the reference object with which to compare.
---@public
---@return boolean {@code true} if this object is the same as the obj          argument; {@code false} otherwise.
--- Indicates whether some other object is "equal to" this one. <p> The {@code equals} method implements an equivalence relation on non-null object references: <ul> <li>It is <i>reflexive</i>: for any non-null reference value     {@code x}, {@code x.equals(x)} should return     {@code true}. <li>It is <i>symmetric</i>: for any non-null reference values     {@code x} and {@code y}, {@code x.equals(y)}     should return {@code true} if and only if     {@code y.equals(x)} returns {@code true}. <li>It is <i>transitive</i>: for any non-null reference values     {@code x}, {@code y}, and {@code z}, if     {@code x.equals(y)} returns {@code true} and     {@code y.equals(z)} returns {@code true}, then     {@code x.equals(z)} should return {@code true}. <li>It is <i>consistent</i>: for any non-null reference values     {@code x} and {@code y}, multiple invocations of     {@code x.equals(y)} consistently return {@code true}     or consistently return {@code false}, provided no     information used in {@code equals} comparisons on the     objects is modified. <li>For any non-null reference value {@code x},     {@code x.equals(null)} should return {@code false}. </ul>  <p> An equivalence relation partitions the elements it operates on into <i>equivalence classes</i>; all the members of an equivalence class are equal to each other. Members of an equivalence class are substitutable for each other, at least for some purposes.
function Object:equals(obj) end

---@protected
---@return java.lang.Object a clone of this instance.
--- Creates and returns a copy of this object.  The precise meaning of "copy" may depend on the class of the object. The general intent is that, for any object {@code x}, the expression: <blockquote> <pre> x.clone() != x</pre></blockquote> will be true, and that the expression: <blockquote> <pre> x.clone().getClass() == x.getClass()</pre></blockquote> will be {@code true}, but these are not absolute requirements. While it is typically the case that: <blockquote> <pre> x.clone().equals(x)</pre></blockquote> will be {@code true}, this is not an absolute requirement. <p> By convention, the returned object should be obtained by calling {@code super.clone}.  If a class and all of its superclasses (except {@code Object}) obey this convention, it will be the case that {@code x.clone().getClass() == x.getClass()}. <p> By convention, the object returned by this method should be independent of this object (which is being cloned).  To achieve this independence, it may be necessary to modify one or more fields of the object returned by {@code super.clone} before returning it.  Typically, this means copying any mutable objects that comprise the internal "deep structure" of the object being cloned and replacing the references to these objects with references to the copies.  If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by {@code super.clone} need to be modified.
function Object:clone() end

---@public
---@return string a string representation of the object.
--- Returns a string representation of the object.
function Object:toString() end

---@public
---@return nil 
--- Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. A thread waits on an object's monitor by calling one of the {@code wait} methods. <p> The awakened thread will not be able to proceed until the current thread relinquishes the lock on this object. The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened thread enjoys no reliable privilege or disadvantage in being the next thread to lock this object. <p> This method should only be called by a thread that is the owner of this object's monitor. A thread becomes the owner of the object's monitor in one of three ways: <ul> <li>By executing a synchronized instance method of that object. <li>By executing the body of a {@code synchronized} statement     that synchronizes on the object. <li>For objects of type {@code Class,} by executing a     static synchronized method of that class. </ul> <p> Only one thread at a time can own an object's monitor.
function Object:notify() end

---@public
---@return nil 
--- Wakes up all threads that are waiting on this object's monitor. A thread waits on an object's monitor by calling one of the {@code wait} methods. <p> The awakened threads will not be able to proceed until the current thread relinquishes the lock on this object. The awakened threads will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened threads enjoy no reliable privilege or disadvantage in being the next thread to lock this object. <p> This method should only be called by a thread that is the owner of this object's monitor. See the {@code notify} method for a description of the ways in which a thread can become the owner of a monitor.
function Object:notifyAll() end

---@public
---@return nil 
--- Causes the current thread to wait until it is awakened, typically by being <em>notified</em> or <em>interrupted</em>. <p> In all respects, this method behaves as if {@code wait(0L, 0)} had been called. See the specification of the {@link #wait(long, int)} method for details.
function Object:wait() end

---@param timeoutMillis number the maximum time to wait, in milliseconds
---@public
---@return nil 
--- Causes the current thread to wait until it is awakened, typically by being <em>notified</em> or <em>interrupted</em>, or until a certain amount of real time has elapsed. <p> In all respects, this method behaves as if {@code wait(timeoutMillis, 0)} had been called. See the specification of the {@link #wait(long, int)} method for details.
function Object:wait(timeoutMillis) end

---@param timeoutMillis number 
---@private
---@return nil 
function Object:wait0(timeoutMillis) end

---@param timeoutMillis number the maximum time to wait, in milliseconds
---@param nanos number additional time, in nanoseconds, in the range 0-999999 inclusive
---@public
---@return nil 
--- Causes the current thread to wait until it is awakened, typically by being <em>notified</em> or <em>interrupted</em>, or until a certain amount of real time has elapsed. <p> The current thread must own this object's monitor lock. See the {@link #notify notify} method for a description of the ways in which a thread can become the owner of a monitor lock. <p> This method causes the current thread (referred to here as <var>T</var>) to place itself in the wait set for this object and then to relinquish any and all synchronization claims on this object. Note that only the locks on this object are relinquished; any other objects on which the current thread may be synchronized remain locked while the thread waits. <p> Thread <var>T</var> then becomes disabled for thread scheduling purposes and lies dormant until one of the following occurs: <ul> <li>Some other thread invokes the {@code notify} method for this object and thread <var>T</var> happens to be arbitrarily chosen as the thread to be awakened. <li>Some other thread invokes the {@code notifyAll} method for this object. <li>Some other thread {@linkplain Thread#interrupt() interrupts} thread <var>T</var>. <li>The specified amount of real time has elapsed, more or less. The amount of real time, in nanoseconds, is given by the expression {@code 1000000 * timeoutMillis + nanos}. If {@code timeoutMillis} and {@code nanos} are both zero, then real time is not taken into consideration and the thread waits until awakened by one of the other causes. <li>Thread <var>T</var> is awakened spuriously. (See below.) </ul> <p> The thread <var>T</var> is then removed from the wait set for this object and re-enabled for thread scheduling. It competes in the usual manner with other threads for the right to synchronize on the object; once it has regained control of the object, all its synchronization claims on the object are restored to the status quo ante - that is, to the situation as of the time that the {@code wait} method was invoked. Thread <var>T</var> then returns from the invocation of the {@code wait} method. Thus, on return from the {@code wait} method, the synchronization state of the object and of thread {@code T} is exactly as it was when the {@code wait} method was invoked. <p> A thread can wake up without being notified, interrupted, or timing out, a so-called <em>spurious wakeup</em>.  While this will rarely occur in practice, applications must guard against it by testing for the condition that should have caused the thread to be awakened, and continuing to wait if the condition is not satisfied. See the example below. <p> For more information on this topic, see section 14.2, "Condition Queues," in Brian Goetz and others' <cite>Java Concurrency in Practice</cite> (Addison-Wesley, 2006) or Item 81 in Joshua Bloch's <cite>Effective Java, Third Edition</cite> (Addison-Wesley, 2018). <p> If the current thread is {@linkplain java.lang.Thread#interrupt() interrupted} by any thread before or while it is waiting, then an {@code InterruptedException} is thrown.  The <em>interrupted status</em> of the current thread is cleared when this exception is thrown. This exception is not thrown until the lock status of this object has been restored as described above.
function Object:wait(timeoutMillis, nanos) end

---@deprecated
---@protected
---@return nil 
--- Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the {@code finalize} method to dispose of system resources or to perform other cleanup. <p> <b>When running in a Java virtual machine in which finalization has been disabled or removed, the garbage collector will never call {@code finalize()}. In a Java virtual machine in which finalization is enabled, the garbage collector might call {@code finalize} only after an indefinite delay.</b> <p> The general contract of {@code finalize} is that it is invoked if and when the Java virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The {@code finalize} method may take any action, including making this object available again to other threads; the usual purpose of {@code finalize}, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. <p> The {@code finalize} method of class {@code Object} performs no special action; it simply returns normally. Subclasses of {@code Object} may override this definition. <p> The Java programming language does not guarantee which thread will invoke the {@code finalize} method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. <p> After the {@code finalize} method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. <p> The {@code finalize} method is never invoked more than once by a Java virtual machine for any given object. <p> Any exception thrown by the {@code finalize} method causes the finalization of this object to be halted, but is otherwise ignored.
function Object:finalize() end

