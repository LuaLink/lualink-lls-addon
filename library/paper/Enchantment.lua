--- The various type of enchantments that may be added to armour or weapons
---@meta
-- org.bukkit.enchantments.Enchantment
---@class Enchantment: Keyed, Translatable, net.kyori.adventure.translation.Translatable
---@field public PROTECTION Enchantment
---@field public FIRE_PROTECTION Enchantment
---@field public FEATHER_FALLING Enchantment
---@field public BLAST_PROTECTION Enchantment
---@field public PROJECTILE_PROTECTION Enchantment
---@field public RESPIRATION Enchantment
---@field public AQUA_AFFINITY Enchantment
---@field public THORNS Enchantment
---@field public DEPTH_STRIDER Enchantment
---@field public FROST_WALKER Enchantment
---@field public BINDING_CURSE Enchantment
---@field public SHARPNESS Enchantment
---@field public SMITE Enchantment
---@field public BANE_OF_ARTHROPODS Enchantment
---@field public KNOCKBACK Enchantment
---@field public FIRE_ASPECT Enchantment
---@field public LOOTING Enchantment
---@field public SWEEPING_EDGE Enchantment
---@field public EFFICIENCY Enchantment
---@field public SILK_TOUCH Enchantment
---@field public UNBREAKING Enchantment
---@field public FORTUNE Enchantment
---@field public POWER Enchantment
---@field public PUNCH Enchantment
---@field public FLAME Enchantment
---@field public INFINITY Enchantment
---@field public LUCK_OF_THE_SEA Enchantment
---@field public LURE Enchantment
---@field public LOYALTY Enchantment
---@field public IMPALING Enchantment
---@field public RIPTIDE Enchantment
---@field public CHANNELING Enchantment
---@field public MULTISHOT Enchantment
---@field public QUICK_CHARGE Enchantment
---@field public PIERCING Enchantment
---@field public DENSITY Enchantment
---@field public BREACH Enchantment
---@field public WIND_BURST Enchantment
---@field public MENDING Enchantment
---@field public VANISHING_CURSE Enchantment
---@field public SOUL_SPEED Enchantment
---@field public SWIFT_SNEAK Enchantment
local Enchantment = {}

---@param key string 
---@private
---@return Enchantment 
function Enchantment:getEnchantment(key) end

---@deprecated
---@public
---@return string 
--- Gets the unique name of this enchantment
function Enchantment:getName() end

---@public
---@return number 
--- Gets the maximum level that this Enchantment may become.
function Enchantment:getMaxLevel() end

---@public
---@return number 
--- Gets the level that this Enchantment should start at
function Enchantment:getStartLevel() end

---@deprecated
---@public
---@return EnchantmentTarget 
--- Gets the type of ItemStack that may fit this Enchantment.
function Enchantment:getItemTarget() end

---@deprecated
---@public
---@return boolean 
--- Checks if this enchantment is a treasure enchantment. Treasure enchantments can only be received via looting, trading, or fishing.
function Enchantment:isTreasure() end

---@public
---@return boolean 
--- Checks if this enchantment is a cursed enchantment Cursed enchantments are found the same way treasure enchantments are
function Enchantment:isCursed() end

---@param other Enchantment 
---@public
---@return boolean 
--- Check if this enchantment conflicts with another enchantment.
function Enchantment:conflictsWith(other) end

---@param item ItemStack 
---@public
---@return boolean 
--- Checks if this Enchantment may be applied to the given ItemStack. This does not check if it conflicts with any enchantments already applied to the item.
function Enchantment:canEnchantItem(item) end

---@param level number 
---@public
---@return @NotNull Component 
--- Get the name of the enchantment with its applied level. If the given level is either less than the #getStartLevel() or greater than the #getMaxLevel(), the level may not be shown in the numeral format one may otherwise expect.
function Enchantment:displayName(level) end

---@public
---@return boolean 
--- Checks if this enchantment can be found in villager trades.
function Enchantment:isTradeable() end

---@public
---@return boolean 
--- Checks if this enchantment can be found in an enchanting table or use to enchant items generated by loot tables.
function Enchantment:isDiscoverable() end

---@param level number 
---@public
---@return number 
--- Gets the minimum modified cost of this enchantment at a specific level. Note this is not the number of experience levels needed, and does not directly translate to the levels shown in an enchanting table. This value is used in combination with factors such as tool enchantability to determine a final cost. See https://minecraft.wiki/w/Enchanting/Levels for more information.
function Enchantment:getMinModifiedCost(level) end

---@param level number 
---@public
---@return number 
--- Gets the maximum modified cost of this enchantment at a specific level. Note this is not the number of experience levels needed, and does not directly translate to the levels shown in an enchanting table. This value is used in combination with factors such as tool enchantability to determine a final cost. See https://minecraft.wiki/w/Enchanting/Levels for more information.
function Enchantment:getMaxModifiedCost(level) end

---@public
---@return number 
--- Gets cost of applying this enchantment using an anvil. Note that this is halved when using an enchantment book, and is multiplied by the level of the enchantment. See https://minecraft.wiki/w/Anvil_mechanics for more information.
function Enchantment:getAnvilCost() end

---@deprecated
---@public
---@return EnchantmentRarity 
--- Gets the rarity of this enchantment.
function Enchantment:getRarity() end

---@deprecated
---@param level number 
---@param entityCategory EntityCategory 
---@public
---@return number 
--- Gets the damage increase as a result of the level and entity category specified
function Enchantment:getDamageIncrease(level, entityCategory) end

---@deprecated
---@param level number 
---@param entityType EntityType 
---@public
---@return number 
--- Gets the damage increase as a result of the level and entity type specified
function Enchantment:getDamageIncrease(level, entityType) end

---@deprecated
---@public
---@return EquipmentSlot> 
--- Gets the equipment slots where this enchantment is considered "active".
function Enchantment:getActiveSlots() end

---@public
---@return EquipmentSlotGroup> 
--- Gets the equipment slots where this enchantment is considered "active".
function Enchantment:getActiveSlotGroups() end

---@public
---@return @NotNull Component 
--- Provides the description of this enchantment entry as displayed to the client, e.g. "Sharpness" for the sharpness enchantment.
function Enchantment:description() end

---@public
---@return ItemType> 
--- Provides the registry key set referencing the items this enchantment is supported on.
function Enchantment:getSupportedItems() end

---@public
---@return ItemType> 
--- Provides the registry key set referencing the item types this enchantment can be applied to when enchanting in an enchantment table. If this value is null, #getSupportedItems() will be sourced instead in the context of an enchantment table. Additionally, the tag io.papermc.paper.registry.keys.tags.EnchantmentTagKeys#IN_ENCHANTING_TABLE defines which enchantments can even show up in an enchantment table.
function Enchantment:getPrimaryItems() end

---@public
---@return number 
--- Provides the weight of this enchantment used by the weighted random when selecting enchantments.
function Enchantment:getWeight() end

---@public
---@return @NotNull RegistryKeySet<Enchantment> 
--- Provides the registry key set of enchantments that this enchantment is exclusive with. Exclusive enchantments prohibit the application of this enchantment to an item if they are already present on said item.
function Enchantment:getExclusiveWith() end

---@deprecated
---@public
---@return string 
function Enchantment:translationKey() end

---@deprecated
---@param key NamespacedKey 
---@public
---@return Enchantment 
--- Gets the Enchantment at the specified key
function Enchantment:getByKey(key) end

---@deprecated
---@param name string 
---@public
---@return Enchantment 
--- Gets the Enchantment at the specified name
function Enchantment:getByName(name) end

---@deprecated
---@public
---@return table<Enchantment> 
--- Gets an array of all the registered Enchantments
function Enchantment:values() end

